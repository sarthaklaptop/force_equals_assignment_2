generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  googleId      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  refreshTokens RefreshToken[]
  sellerAppointments Appointment[] @relation("SellerAppointments")
  buyerAppointments  Appointment[] @relation("BuyerAppointments")
  availability  SellerAvailability[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Appointment {
  id             String   @id @default(cuid())
  sellerId       String
  buyerId        String
  startTime      DateTime
  endTime        DateTime
  googleEventId  String?  @unique
  title          String?
  description    String?
  status         AppointmentStatus @default(SCHEDULED)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  seller User @relation("SellerAppointments", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer  User @relation("BuyerAppointments", fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([buyerId])
  @@index([startTime])
}

model SellerAvailability {
  id        String   @id @default(cuid())
  userId    String
  weekday   Int      // 0=Sun .. 6=Sat
  startMin  Int      // minutes from midnight UTC
  endMin    Int      // minutes from midnight UTC
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekday, startMin, endMin])
  @@index([userId])
}

// role is now a string: "BUYER" | "SELLER" (nullable until first selection)

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}